//--------------------- Prisma Boilerplate ---------------------//
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}


//--------------------- User Schema ---------------------//
enum Role {
    USER
    ADMIN
    SUPERUSER
}

model User {
    user_id       Int     @id     @default(autoincrement())
    username      String  @unique
    email         String  @unique
    password      String?
    refresh_token String?

    role          Role    @default(USER)


    @@map("users")
}

//--------------------- Vehicle Schema ---------------------//
model VehicleType {
    vehicle_type_id   Int @id @default(autoincrement())
    vehicle_type_name String

    models            Model[]

    @@unique([vehicle_type_name])
    @@map("vehicle-type")
}

model Make {
    make_id     Int     @id @default(autoincrement())
    make_name   String

    models      Model[]


    @@unique([make_name])
    @@map("vehicle-make")
}

model Model {
    model_id        Int         @id @default(autoincrement())
    model_name      String
    full_model_name String
    year            Int

    vehicle_type    VehicleType @relation(fields: [vehicle_type_id], references: [vehicle_type_id], onDelete: Cascade)
    vehicle_type_id Int

    make            Make        @relation(fields: [make_id], references: [make_id], onDelete: Cascade)
    make_id         Int

    dimensions      Dimensions?
    weight          Int?

    quotes          Quote[]

    @@unique([make_id, model_name])
    @@map("vehicle-model")
}

model Dimensions {
    dimensions_id   Int   @id   @default(autoincrement())

    model           Model @relation(fields: [model_id], references: [model_id], onDelete: Cascade)
    model_id        Int

    length          Float
    width           Float
    height          Float


    @@unique([model_id])
    @@map("vehicle-dimensions")
}


//--------------------- Geolocation Schema ---------------------//
model Country {
    country_id           Int    @id     @default(autoincrement())
    country_name         String @unique
    country_abbreviation String @unique

    states               State[]
    postal_codes         PostalCode[]


    @@map("country")
}


model PostalCode {
    postal_code_id      Int       @id @default(autoincrement())
    postal_code_value   String

    country             Country?      @relation(fields: [country_id], references: [country_id], onDelete: Cascade)
    country_id          Int?

    latitude            Float
    longitude           Float

    cities              PostalCodesInCities[]


    @@unique([postal_code_value])
    @@map("postal-code")
}


model State {
    state_id            Int     @id @default(autoincrement())
    state_name          String  @unique
    state_abbreviation  String  @unique

    country             Country @relation(fields: [country_id], references: [country_id], onDelete: Cascade)
    country_id          Int

    cities              City[]

    @@unique([country_id, state_name])
    @@map("state")
}

model City {
    city_id         Int     @id @default(autoincrement())
    city_name       String
    
    state           State   @relation(fields: [state_id], references: [state_id], onDelete: Cascade)
    state_id        Int

    latitude        Float
    longitude       Float

    postal_codes    PostalCodesInCities[]

    @@unique([state_id, city_name])
    @@map("city")
}



model PostalCodesInCities {
    postal_code    PostalCode   @relation(fields: [postal_code_id], references: [postal_code_id])
    postal_code_id Int

    city           City         @relation(fields: [city_id], references: [city_id])
    city_id        Int


    @@id([city_id, postal_code_id])
    @@map("postal-codes-in-cities")
}

//------------------------ Quote Schema ------------------------//
model QuoteVariable {
    quote_variable_id   Int         @id @default(autoincrement())
    created_at          DateTime    @default(now())

    coefficient         Float
    power               Float
    base_price          Float
    inoperational_fee   Float
    enclosed_fee        Float


    @@map("quote-variables")
}

model Quote {
    quote_id         String   @id @default(uuid())
    
    created_at       DateTime @default(now())
    updated_at       DateTime @updatedAt

    email            String
    phone_number     String?
    reservation      String?
    exact_date       DateTime?

    vehicle_model_id Int
    is_operational   Boolean
    is_enclosed      Boolean

    from_lat         Float
    from_long        Float
    to_lat           Float
    to_long          Float

    distance         Float?
    quote_estimate   Float

    vehicle_model    Model  @relation(fields: [vehicle_model_id], references: [model_id])


    @@map("quotes")
}
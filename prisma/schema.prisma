//--------------------- Prisma Boilerplate ---------------------//
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}


//--------------------- User Schema ---------------------//
enum Role {
    USER
    ADMIN
    SUPERUSER
}

model User {
    user_id       Int     @id     @default(autoincrement())
    username      String  @unique
    email         String  @unique
    password      String?
    refresh_token String?

    role          Role    @default(USER)


    @@map("users")
}

//--------------------- Vehicle Schema ---------------------//
model Make {
    make_id     Int     @id @default(autoincrement())
    
    make_name   String
    year        Int

    models      Model[]


    @@unique([make_name])
    @@map("vehicle-make")
}

model Model {
    model_id    Int         @id @default(autoincrement())
    model_name  String

    make        Make        @relation(fields: [make_id], references: [make_id], onDelete: Cascade)
    make_id     Int

    dimensions  Dimensions?
    weight      Int


    @@unique([make_id, model_name])
    @@map("vehicle-model")
}

model Dimensions {
    dimensions_id   Int   @id   @default(autoincrement())

    model           Model @relation(fields: [model_id], references: [model_id], onDelete: Cascade)
    model_id        Int

    length          Float
    width           Float
    height          Float


    @@unique([model_id])
    @@map("vehicle-dimensions")
}


//--------------------- Geolocation Schema ---------------------//
model Country {
    country_id           Int    @id     @default(autoincrement())
    country_name         String @unique
    country_abbreviation String @unique

    states               State[]


    @@map("country")
}

model State {
    state_id            Int     @id @default(autoincrement())
    state_name          String  @unique
    state_abbreviation  String  @unique

    country             Country @relation(fields: [country_id], references: [country_id], onDelete: Cascade)
    country_id          Int

    cities              City[]

    @@unique([country_id, state_name])
    @@map("state")
}

model City {
    city_id         Int     @id @default(autoincrement())
    city_name       String
    
    state           State   @relation(fields: [state_id], references: [state_id], onDelete: Cascade)
    state_id        Int

    postal_codes    PostalCode[]


    @@unique([state_id, city_name])
    @@map("city")
}

model PostalCode {
    postal_code_id      Int       @id @default(autoincrement())
    postal_code_value   String

    city                City      @relation(fields: [city_id], references: [city_id], onDelete: Cascade)
    city_id             Int

    latitude            Float
    longitude           Float

    positions_one       Distance[] @relation("position_one")
    positions_two       Distance[] @relation("position_two")


    @@unique([postal_code_value])
    @@map("postal-code")
}

model Distance {
    distance_id                 Int   @id @default(autoincrement())

    first_postal_code_node      PostalCode @relation("position_one", fields: [first_postal_code_node_id], references: [postal_code_id], onDelete: Cascade)
    first_postal_code_node_id   Int

    second_postal_code_node     PostalCode @relation("position_two", fields: [second_postal_code_node_id], references: [postal_code_id], onDelete: Cascade)
    second_postal_code_node_id  Int

    ground_distance             Float


    @@unique([first_postal_code_node_id, second_postal_code_node_id])
    @@map("postal-to-postal-distance")
}